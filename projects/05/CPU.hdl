// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //Control Unit
    //A なら0になるはず
    Not(in=instruction[15], out=Ainstruction);
    //Cなら１(そのままだが命名)
    Not(in=Ainstruction, out=Cinstruction);

    //Aregisterへの出力かどうか and C命令かどうか
    And(a=Cinstruction, b=instruction[5], out=ALUtoA);
    Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=Aregin);

    //A命令か、C命令Aregister操作ならload
    Or(a=Ainstruction, b=ALUtoA, out=loadA);
    ARegister(in=Aregin, load=loadA, out=Aout);

    //C命令のaのビットを見るそれによってMの値かAの値か決まる
    Mux16(a=Aout, b=inM, sel=instruction[12], out=AMout);

    //DRegisterへ出力されるC命令かどうか
    And(a=Cinstruction, b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=Dout);

    //Hackの仕様とOperandの対応を見て決める
    ALU(x=Dout, y=AMout, zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=ALUout, zr=ZRout, ng=NGout);

    //Outputをかきこみのためのメモリへ
    Or16(a=false, b=Aout, out[0..14]=addressM);
    Or16(a=false, b=ALUout, out=outM);
    //C命令で、三つめのフラグがたっていたらかきこみ
    And(a=Cinstruction, b=instruction[3], out=writeM);

    //PCloadはジャンプするときにたつ、ジャンプはARegiseterの値になるので入力はARegiseterの出力
    //値が0ならジャンプするフラグ(JEQ, JGE, JLE)
    And(a=ZRout, b=instruction[1], out=jeq);
    //値が負ならジャンプするフラグ(JEQ, JGE, JLE)
    And(a=NGout, b=instruction[2], out=jlt);
    //>0を表現するために<=0のフラグをとって否定する
    Or(a=ZRout, b=NGout, out=zeroOrNeg);
    Not(in=zeroOrNeg, out=positive);
    And(a=positive, b=instruction[0], out=jgt);

    //たてた条件フラグのどれかがたってたらジャンプ(ARegisterの値をPCに)その前にC命令であることを確認する
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=jumpToA);
    And(a=Cinstruction, b=jumpToA, out=PCload);
    //loadしないときはincrement
    Not(in=PCload, out=PCinc);
    PC(in=Aout, inc=PCinc,load=PCload, reset=reset,out[0..14]=pc);
}
